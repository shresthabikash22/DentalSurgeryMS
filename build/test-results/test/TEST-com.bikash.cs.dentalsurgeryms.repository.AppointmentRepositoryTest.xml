<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.bikash.cs.dentalsurgeryms.repository.AppointmentRepositoryTest" tests="8" skipped="0" failures="0" errors="0" timestamp="2025-04-26T17:24:58.228Z" hostname="DESKTOP-MOANBAB" time="1.033">
  <properties/>
  <testcase name="Find appointments by dentist ID" classname="com.bikash.cs.dentalsurgeryms.repository.AppointmentRepositoryTest" time="0.783"/>
  <testcase name="Find appointments by dentist ID when none exist" classname="com.bikash.cs.dentalsurgeryms.repository.AppointmentRepositoryTest" time="0.024"/>
  <testcase name="Find appointments by patient ID" classname="com.bikash.cs.dentalsurgeryms.repository.AppointmentRepositoryTest" time="0.021"/>
  <testcase name="Exists by patient and status not" classname="com.bikash.cs.dentalsurgeryms.repository.AppointmentRepositoryTest" time="0.061"/>
  <testcase name="Exists by surgery ID" classname="com.bikash.cs.dentalsurgeryms.repository.AppointmentRepositoryTest" time="0.021"/>
  <testcase name="Find appointment by dentist ID, date range and status" classname="com.bikash.cs.dentalsurgeryms.repository.AppointmentRepositoryTest" time="0.04"/>
  <testcase name="Exists by dentist and status not" classname="com.bikash.cs.dentalsurgeryms.repository.AppointmentRepositoryTest" time="0.035"/>
  <testcase name="Find appointments by patient ID when none exist" classname="com.bikash.cs.dentalsurgeryms.repository.AppointmentRepositoryTest" time="0.036"/>
  <system-out><![CDATA[2025-04-26T12:24:54.740-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.bikash.cs.dentalsurgeryms.repository.AppointmentRepositoryTest]: AppointmentRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-04-26T12:24:55.049-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.bikash.cs.dentalsurgeryms.DentalSurgeryMsApplication for test class com.bikash.cs.dentalsurgeryms.repository.AppointmentRepositoryTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.4)

2025-04-26T12:24:55.551-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] c.b.c.d.r.AppointmentRepositoryTest      : Starting AppointmentRepositoryTest using Java 21.0.2 with PID 12668 (started by Bikash Shrestha in C:\MIU-Folder\Applied Software Development\Project\DentalSurgeryMS)
2025-04-26T12:24:55.552-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] c.b.c.d.r.AppointmentRepositoryTest      : The following 1 profile is active: "test"
2025-04-26T12:24:56.354-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26T12:24:56.513-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 154 ms. Found 6 JPA repository interfaces.
2025-04-26T12:24:56.631-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] beddedDataSourceBeanFactoryPostProcessor : Replacing 'dataSource' DataSource bean with embedded version
2025-04-26T12:24:56.764-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] o.s.j.d.e.EmbeddedDatabaseFactory        : Starting embedded database: url='jdbc:h2:mem:5ccac48b-1e8a-4985-802e-5c521525ddb1;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2025-04-26T12:24:57.409-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26T12:24:57.416-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-04-26T12:24:57.442-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26T12:24:57.487-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy@36bcae97']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-04-26T12:24:57.901-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: drop table if exists addresses cascade 
Hibernate: drop table if exists appointments cascade 
Hibernate: drop table if exists dentists cascade 
Hibernate: drop table if exists patients cascade 
Hibernate: drop table if exists surgeries cascade 
Hibernate: drop table if exists user_roles cascade 
Hibernate: drop table if exists users cascade 
Hibernate: create table addresses (id bigint generated by default as identity, zip_code varchar(10) not null, city varchar(50) not null, state varchar(50) not null, street varchar(100) not null, primary key (id))
Hibernate: create table appointments (appointment_date_time timestamp(6) not null, dentist_id bigint not null, id bigint generated by default as identity, patient_id bigint not null, surgery_id bigint not null, status enum ('CANCELLED','COMPLETED','REQUESTED','SCHEDULED') not null, primary key (id))
Hibernate: create table dentists (id bigint generated by default as identity, user_id bigint not null unique, phone_number varchar(20) not null, first_name varchar(50) not null, last_name varchar(50) not null, specialization varchar(100) not null, email varchar(255) not null unique, primary key (id))
Hibernate: create table patients (date_of_birth date not null, has_unpaid_bill boolean not null, address_id bigint not null unique, id bigint generated by default as identity, user_id bigint not null unique, phone_number varchar(20) not null, first_name varchar(50) not null, last_name varchar(50) not null, email varchar(255) not null unique, primary key (id))
Hibernate: create table surgeries (address_id bigint not null unique, id bigint generated by default as identity, phone_number varchar(20) not null, surgery_name varchar(100) not null, branch_code varchar(255) not null unique, primary key (id), unique (surgery_name, address_id))
Hibernate: create table user_roles (user_id bigint not null, role enum ('DENTIST','MANAGER','PATIENT'))
Hibernate: create table users (user_id bigint generated by default as identity, username varchar(50) not null unique, password varchar(255) not null, primary key (user_id))
Hibernate: alter table if exists appointments add constraint FKqsnula0nj86s67otibu2j2hsv foreign key (dentist_id) references dentists
Hibernate: alter table if exists appointments add constraint FK8exap5wmg8kmb1g1rx3by21yt foreign key (patient_id) references patients
Hibernate: alter table if exists appointments add constraint FK68v0hdkvl8qnssll24tmugia6 foreign key (surgery_id) references surgeries
Hibernate: alter table if exists dentists add constraint FKhujh1sfetn2d95s56ofcd4ya foreign key (user_id) references users
Hibernate: alter table if exists patients add constraint FKjc8017x8ae0rqi11m8jmny646 foreign key (address_id) references addresses
Hibernate: alter table if exists patients add constraint FKuwca24wcd1tg6pjex8lmc0y7 foreign key (user_id) references users
Hibernate: alter table if exists surgeries add constraint FK51c727fvh92teps6wulnss1hs foreign key (address_id) references addresses
Hibernate: alter table if exists user_roles add constraint FKhfh9dx7w3ubf1co1vdev94g3f foreign key (user_id) references users
2025-04-26T12:24:58.002-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26T12:24:58.224-05:00  INFO 12668 --- [DentalSurgeryMS] [    Test worker] c.b.c.d.r.AppointmentRepositoryTest      : Started AppointmentRepositoryTest in 3.158 seconds (process running for 23.357)
Hibernate: insert into addresses (city,state,street,zip_code,id) values (?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into patients (address_id,date_of_birth,email,first_name,has_unpaid_bill,last_name,phone_number,user_id,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into dentists (email,first_name,last_name,phone_number,specialization,user_id,id) values (?,?,?,?,?,?,default)
Hibernate: insert into surgeries (address_id,branch_code,phone_number,surgery_name,id) values (?,?,?,?,default)
Hibernate: insert into appointments (appointment_date_time,dentist_id,patient_id,status,surgery_id,id) values (?,?,?,?,?,default)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: select a1_0.id,a1_0.appointment_date_time,a1_0.dentist_id,a1_0.patient_id,a1_0.status,a1_0.surgery_id from appointments a1_0 left join dentists d1_0 on d1_0.id=a1_0.dentist_id where d1_0.id=? fetch first ? rows only
Hibernate: insert into addresses (city,state,street,zip_code,id) values (?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into patients (address_id,date_of_birth,email,first_name,has_unpaid_bill,last_name,phone_number,user_id,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into dentists (email,first_name,last_name,phone_number,specialization,user_id,id) values (?,?,?,?,?,?,default)
Hibernate: insert into surgeries (address_id,branch_code,phone_number,surgery_name,id) values (?,?,?,?,default)
Hibernate: insert into appointments (appointment_date_time,dentist_id,patient_id,status,surgery_id,id) values (?,?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into dentists (email,first_name,last_name,phone_number,specialization,user_id,id) values (?,?,?,?,?,?,default)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: select a1_0.id,a1_0.appointment_date_time,a1_0.dentist_id,a1_0.patient_id,a1_0.status,a1_0.surgery_id from appointments a1_0 left join dentists d1_0 on d1_0.id=a1_0.dentist_id where d1_0.id=? fetch first ? rows only
Hibernate: insert into addresses (city,state,street,zip_code,id) values (?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into patients (address_id,date_of_birth,email,first_name,has_unpaid_bill,last_name,phone_number,user_id,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into dentists (email,first_name,last_name,phone_number,specialization,user_id,id) values (?,?,?,?,?,?,default)
Hibernate: insert into surgeries (address_id,branch_code,phone_number,surgery_name,id) values (?,?,?,?,default)
Hibernate: insert into appointments (appointment_date_time,dentist_id,patient_id,status,surgery_id,id) values (?,?,?,?,?,default)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: select a1_0.id,a1_0.appointment_date_time,a1_0.dentist_id,a1_0.patient_id,a1_0.status,a1_0.surgery_id from appointments a1_0 left join patients p1_0 on p1_0.id=a1_0.patient_id where p1_0.id=? fetch first ? rows only
Hibernate: insert into addresses (city,state,street,zip_code,id) values (?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into patients (address_id,date_of_birth,email,first_name,has_unpaid_bill,last_name,phone_number,user_id,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into dentists (email,first_name,last_name,phone_number,specialization,user_id,id) values (?,?,?,?,?,?,default)
Hibernate: insert into surgeries (address_id,branch_code,phone_number,surgery_name,id) values (?,?,?,?,default)
Hibernate: insert into appointments (appointment_date_time,dentist_id,patient_id,status,surgery_id,id) values (?,?,?,?,?,default)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: select a1_0.id from appointments a1_0 where a1_0.patient_id=? and a1_0.status<>? fetch first ? rows only
Hibernate: insert into addresses (city,state,street,zip_code,id) values (?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into patients (address_id,date_of_birth,email,first_name,has_unpaid_bill,last_name,phone_number,user_id,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into dentists (email,first_name,last_name,phone_number,specialization,user_id,id) values (?,?,?,?,?,?,default)
Hibernate: insert into surgeries (address_id,branch_code,phone_number,surgery_name,id) values (?,?,?,?,default)
Hibernate: insert into appointments (appointment_date_time,dentist_id,patient_id,status,surgery_id,id) values (?,?,?,?,?,default)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: select a1_0.id from appointments a1_0 left join surgeries s1_0 on s1_0.id=a1_0.surgery_id where s1_0.id=? fetch first ? rows only
Hibernate: insert into addresses (city,state,street,zip_code,id) values (?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into patients (address_id,date_of_birth,email,first_name,has_unpaid_bill,last_name,phone_number,user_id,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into dentists (email,first_name,last_name,phone_number,specialization,user_id,id) values (?,?,?,?,?,?,default)
Hibernate: insert into surgeries (address_id,branch_code,phone_number,surgery_name,id) values (?,?,?,?,default)
Hibernate: insert into appointments (appointment_date_time,dentist_id,patient_id,status,surgery_id,id) values (?,?,?,?,?,default)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: select a1_0.id,a1_0.appointment_date_time,a1_0.dentist_id,a1_0.patient_id,a1_0.status,a1_0.surgery_id from appointments a1_0 left join dentists d1_0 on d1_0.id=a1_0.dentist_id where d1_0.id=? and a1_0.appointment_date_time between ? and ? and a1_0.status=?
Hibernate: insert into addresses (city,state,street,zip_code,id) values (?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into patients (address_id,date_of_birth,email,first_name,has_unpaid_bill,last_name,phone_number,user_id,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into dentists (email,first_name,last_name,phone_number,specialization,user_id,id) values (?,?,?,?,?,?,default)
Hibernate: insert into surgeries (address_id,branch_code,phone_number,surgery_name,id) values (?,?,?,?,default)
Hibernate: insert into appointments (appointment_date_time,dentist_id,patient_id,status,surgery_id,id) values (?,?,?,?,?,default)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: select a1_0.id from appointments a1_0 where a1_0.dentist_id=? and a1_0.status<>? fetch first ? rows only
Hibernate: insert into addresses (city,state,street,zip_code,id) values (?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into patients (address_id,date_of_birth,email,first_name,has_unpaid_bill,last_name,phone_number,user_id,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into dentists (email,first_name,last_name,phone_number,specialization,user_id,id) values (?,?,?,?,?,?,default)
Hibernate: insert into surgeries (address_id,branch_code,phone_number,surgery_name,id) values (?,?,?,?,default)
Hibernate: insert into appointments (appointment_date_time,dentist_id,patient_id,status,surgery_id,id) values (?,?,?,?,?,default)
Hibernate: insert into addresses (city,state,street,zip_code,id) values (?,?,?,?,default)
Hibernate: insert into users (password,username,user_id) values (?,?,default)
Hibernate: insert into patients (address_id,date_of_birth,email,first_name,has_unpaid_bill,last_name,phone_number,user_id,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: insert into user_roles (user_id,role) values (?,?)
Hibernate: select a1_0.id,a1_0.appointment_date_time,a1_0.dentist_id,a1_0.patient_id,a1_0.status,a1_0.surgery_id from appointments a1_0 left join patients p1_0 on p1_0.id=a1_0.patient_id where p1_0.id=? fetch first ? rows only
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
